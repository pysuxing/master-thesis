% This file was created with JabRef 2.7b.
% Encoding: UTF-8

@INPROCEEDINGS{Archuleta2009,
  author = {Archuleta, J. and Yong Cao and Scogland, T. and Wu-chun Feng},
  title = {Multi-dimensional characterization of temporal data mining on graphics
	processors},
  booktitle = {Parallel Distributed Processing, 2009. IPDPS 2009. IEEE International
	Symposium on},
  year = {2009},
  pages = {1-12},
  __markedentry = {[suxing:4]},
  issn = {1530-2075},
  keywords = {biology computing;computer graphic equipment;data mining;neurophysiology;parallel
	processing;software performance evaluation;MapReduce-based data-mining;data
	parallelism;data-access method;general-purpose GPU;graphics processing
	unit;graphics processors;multi-dimensional characterization;multidimensional
	performance evaluation;task parallelism;temporal data mining;Bandwidth;Collaboration;Collaborative
	work;Data mining;Delay;Graphics;Peer to peer computing;Scalability;Streaming
	media;Videos},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{auguin1983,
  author = {Auguin, M and Larbey, F},
  title = {OPSILA, an advanced SIMD for numerical analysis and signal processing},
  booktitle = {Euromicro-83 Symp.(sept. 14--16 1983)},
  year = {1983},
  pages = {311--318}
}

@BOOK{Barendregt1985,
  title = {The lambda calculus: Its syntax and semantics},
  publisher = {Access Online via Elsevier},
  year = {1985},
  author = {Barendregt, Hendrik Pieter},
  volume = {103},
  owner = {suxing},
  timestamp = {2013.11.10}
}

@ARTICLE{Barendsen1994,
  author = {Barendsen, Henk Barendregt Erik},
  title = {Introduction to lambda calculus},
  year = {1994},
  owner = {suxing},
  timestamp = {2013.11.10}
}

@TECHREPORT{Blelloch1995,
  author = {Blelloch, Guy E},
  title = {NESL: A Nested Data-Parallel Language.(Version 3.1)},
  institution = {DTIC Document},
  year = {1995},
  __markedentry = {[suxing:1]},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INCOLLECTION{Chakravarty2001,
  author = {Chakravarty, ManuelM.T. and Keller, Gabriele and Lechtchinsky, Roman
	and Pfannenstiel, Wolf},
  title = {Nepal - Nested Data Parallelism in Haskell},
  booktitle = {Euro-Par 2001 Parallel Processing},
  publisher = {Springer Berlin Heidelberg},
  year = {2001},
  editor = {Sakellariou, Rizos and Gurd, John and Freeman, Len and Keane, John},
  volume = {2150},
  series = {Lecture Notes in Computer Science},
  pages = {524-534},
  __markedentry = {[suxing:1]},
  isbn = {978-3-540-42495-6},
  language = {English},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Chakravarty2000,
  author = {Chakravarty, Manuel MT and Keller, Gabriele},
  title = {More types for nested data parallel programming},
  booktitle = {ACM SIGPLAN Notices},
  year = {2000},
  volume = {35},
  number = {9},
  pages = {94--105},
  organization = {ACM},
  __markedentry = {[suxing:1]},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Chakravarty2011,
  author = {Chakravarty, Manuel M.T. and Keller, Gabriele and Lee, Sean and McDonell,
	Trevor L. and Grover, Vinod},
  title = {Accelerating Haskell array codes with multicore GPUs},
  booktitle = {Proceedings of the sixth workshop on Declarative aspects of multicore
	programming},
  year = {2011},
  series = {DAMP '11},
  pages = {3--14},
  address = {New York, NY, USA},
  publisher = {ACM},
  __markedentry = {[suxing:3]},
  acmid = {1926358},
  isbn = {978-1-4503-0486-3},
  keywords = {arrays, data parallelism, dynamic compilation, gpgpu, haskell, skeletons},
  location = {Austin, Texas, USA},
  numpages = {12},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Chakravarty2007,
  author = {Chakravarty, Manuel MT and Leshchinskiy, Roman and Jones, Simon Peyton
	and Keller, Gabriele and Marlow, Simon},
  title = {Data Parallel Haskell: a status report},
  booktitle = {Proceedings of the 2007 workshop on Declarative aspects of multicore
	programming},
  year = {2007},
  pages = {10--18},
  organization = {ACM},
  __markedentry = {[suxing:1]},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Chen2012,
  author = {Chen, Linchuan and Agrawal, Gagan},
  title = {Optimizing MapReduce for GPUs with effective shared memory usage},
  booktitle = {Proceedings of the 21st international symposium on High-Performance
	Parallel and Distributed Computing},
  year = {2012},
  series = {HPDC '12},
  pages = {199--210},
  address = {New York, NY, USA},
  publisher = {ACM},
  __markedentry = {[suxing:4]},
  acmid = {2287109},
  isbn = {978-1-4503-0805-2},
  keywords = {gpu, mapreduce, shared memory},
  location = {Delft, The Netherlands},
  numpages = {12},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@BOOK{Cohen1998,
  title = {Win32 Multithreaded Programming},
  publisher = {O'Reilly Media},
  year = {1998},
  author = {Cohen, Aaron I and Woodring, Mike},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@ARTICLE{Dagum1998,
  author = {Dagum, Leonardo and Menon, Ramesh},
  title = {OpenMP: an industry standard API for shared-memory programming},
  journal = {Computational Science \& Engineering, IEEE},
  year = {1998},
  volume = {5},
  pages = {46--55},
  number = {1},
  owner = {suxing},
  publisher = {IEEE},
  timestamp = {2013.11.08}
}

@ARTICLE{Dean2008,
  author = {Dean, Jeffrey and Ghemawat, Sanjay},
  title = {MapReduce: simplified data processing on large clusters},
  journal = {Communications of the ACM},
  year = {2008},
  volume = {51},
  pages = {107--113},
  number = {1},
  __markedentry = {[suxing:4]},
  owner = {suxing},
  publisher = {ACM},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Discolo2006,
  author = {Discolo, Anthony and Harris, Tim and Marlow, Simon and Jones, Simon
	Peyton and Singh, Satnam},
  title = {Lock free data structures using STM in haskell},
  booktitle = {Proceedings of the 8th international conference on Functional and
	Logic Programming},
  year = {2006},
  series = {FLOPS'06},
  pages = {65--80},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  __markedentry = {[suxing:2]},
  acmid = {2100080},
  isbn = {3-540-33438-6, 978-3-540-33438-5},
  location = {Fuji-Susono, Japan},
  numpages = {16},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@ARTICLE{Drepper2003,
  author = {Drepper, Ulrich and Molnar, Ingo},
  title = {The native POSIX thread library for Linux},
  journal = {White Paper, Red Hat Inc},
  year = {2003},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@ARTICLE{Fang2011,
  author = {Wenbin Fang and Bingsheng He and Qiong Luo and Govindaraju, N.K.},
  title = {Mars: Accelerating MapReduce with Graphics Processors},
  journal = {Parallel and Distributed Systems, IEEE Transactions on},
  year = {2011},
  volume = {22},
  pages = {608-620},
  number = {4},
  __markedentry = {[suxing:4]},
  abstract = {We design and implement Mars, a MapReduce runtime system accelerated
	with graphics processing units (GPUs). MapReduce is a simple and
	flexible parallel programming paradigm originally proposed by Google,
	for the ease of large-scale data processing on thousands of CPUs.
	Compared with CPUs, GPUs have an order of magnitude higher computation
	power and memory bandwidth. However, GPUs are designed as special-purpose
	coprocessors and their programming interfaces are less familiar than
	those on the CPUs to MapReduce programmers. To harness GPUs' power
	for MapReduce, we developed Mars to run on NVIDIA GPUs, AMD GPUs
	as well as multicore CPUs. Furthermore, we integrated Mars into Hadoop,
	an open-source CPU-based MapReduce system. Mars hides the programming
	complexity of GPUs behind the simple and familiar MapReduce interface,
	and automatically manages task partitioning, data distribution, and
	parallelization on the processors. We have implemented six representative
	applications on Mars and evaluated their performance on PCs equipped
	with GPUs as well as multicore CPUs. The experimental results show
	that, the GPU-CPU coprocessing of Mars on an NVIDIA GTX280 GPU and
	an Intel quad-core CPU outperformed Phoenix, the state-of-the-art
	MapReduce on the multicore CPU with a speedup of up to 72 times and
	24 times on average, depending on the applications. Additionally,
	integrating Mars into Hadoop enabled GPU acceleration for a network
	of PCs.},
  issn = {1045-9219},
  keywords = {computer graphic equipment;parallel programming;public domain software;Google;Hadoop;Mars;flexible
	parallel programming;graphics processing units;large-scale data processing;open-source
	CPU-based MapReduce system;runtime system;MapReduce;graphics processor;many-core
	architecture.;multicore processor;parallel computing},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Geist1996,
  author = {Geist, Al and Gropp, William and Huss-Lederman, Steve and Lumsdaine,
	Andrew and Lusk, Ewing and Saphir, William and Skjellum, Tony and
	Snir, Marc},
  title = {MPI-2: Extending the message-passing interface},
  booktitle = {Euro-Par'96 Parallel Processing},
  year = {1996},
  pages = {128--135},
  organization = {Springer},
  timestamp = {2013.11.08}
}

@ARTICLE{Group2008,
  author = {Khronos OpenCL Working Group and others},
  title = {The opencl specification},
  journal = {A. Munshi, Ed},
  year = {2008},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Harris2005,
  author = {Harris, Tim and Marlow, Simon and Peyton-Jones, Simon and Herlihy,
	Maurice},
  title = {Composable memory transactions},
  booktitle = {Proceedings of the tenth ACM SIGPLAN symposium on Principles and
	practice of parallel programming},
  year = {2005},
  pages = {48--60},
  organization = {ACM},
  __markedentry = {[suxing:2]},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{He2008,
  author = {He, Bingsheng and Fang, Wenbin and Luo, Qiong and Govindaraju, Naga
	K. and Wang, Tuyong},
  title = {Mars: a MapReduce framework on graphics processors},
  booktitle = {Proceedings of the 17th international conference on Parallel architectures
	and compilation techniques},
  year = {2008},
  series = {PACT '08},
  pages = {260--269},
  address = {New York, NY, USA},
  publisher = {ACM},
  __markedentry = {[suxing:4]},
  acmid = {1454152},
  isbn = {978-1-60558-282-5},
  keywords = {GPGPU, MapReduce, data parallelism, graphics processor, multi-core
	processors, web analysis},
  location = {Toronto, Ontario, Canada},
  numpages = {10},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Hong2010,
  author = {Hong, Chuntao and Chen, Dehao and Chen, Wenguang and Zheng, Weimin
	and Lin, Haibo},
  title = {MapCG: writing parallel program portable between CPU and GPU},
  booktitle = {Proceedings of the 19th international conference on Parallel architectures
	and compilation techniques},
  year = {2010},
  series = {PACT '10},
  pages = {217--226},
  address = {New York, NY, USA},
  publisher = {ACM},
  __markedentry = {[suxing:4]},
  acmid = {1854303},
  isbn = {978-1-4503-0178-7},
  keywords = {GPU programming, parallel, portability},
  location = {Vienna, Austria},
  numpages = {10},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Ji2011,
  author = {Ji, Feng and Ma, Xiaosong},
  title = {Using Shared Memory to Accelerate MapReduce on Graphics Processing
	Units},
  booktitle = {Proceedings of the 2011 IEEE International Parallel \& Distributed
	Processing Symposium},
  year = {2011},
  series = {IPDPS '11},
  pages = {805--816},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  __markedentry = {[suxing:4]},
  acmid = {2059510},
  isbn = {978-0-7695-4385-7},
  numpages = {12},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@BOOK{Jones2003,
  title = {Haskell 98 language and libraries: the revised report},
  publisher = {Cambridge University Press},
  year = {2003},
  author = {Jones, Simon L Peyton},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Jones2008,
  author = {Jones, Simon L Peyton and Leshchinskiy, Roman and Keller, Gabriele
	and Chakravarty, Manuel MT},
  title = {Harnessing the Multicores: Nested Data Parallelism in Haskell.},
  booktitle = {FSTTCS},
  year = {2008},
  volume = {2},
  pages = {383--414},
  __markedentry = {[suxing:1]},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Jones2001,
  author = {Simon Peyton Jones},
  title = {Tackling the awkward squad: monadic input/output, concurrency, exceptions,
	and foreign-language calls in Haskell},
  booktitle = {Engineering theories of software construction},
  year = {2001},
  pages = {47--96},
  publisher = {Press},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Jones1996,
  author = {Simon Peyton Jones and Andrew Gordon and Sigbjorn Finne},
  title = {Concurrent Haskell},
  booktitle = {ANNUAL SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES},
  year = {1996},
  pages = {295--308},
  publisher = {ACM},
  __markedentry = {[suxing:2]},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Keller2010,
  author = {Keller, Gabriele and Chakravarty, Manuel M.T. and Leshchinskiy, Roman
	and Peyton Jones, Simon and Lippmeier, Ben},
  title = {Regular, shape-polymorphic, parallel arrays in Haskell},
  booktitle = {Proceedings of the 15th ACM SIGPLAN international conference on Functional
	programming},
  year = {2010},
  series = {ICFP '10},
  pages = {261--272},
  address = {New York, NY, USA},
  publisher = {ACM},
  __markedentry = {[suxing:1]},
  acmid = {1863582},
  isbn = {978-1-60558-794-3},
  keywords = {arrays, data parallelism, haskell},
  location = {Baltimore, Maryland, USA},
  numpages = {12},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Lee2009,
  author = {Lee, Sean and Chakravarty, Manuel MT and Grover, Vinod and Keller,
	Gabriele},
  title = {GPU kernels as data-parallel array computations in Haskell},
  booktitle = {Workshop on Exploiting Parallelism using GPUs and other Hardware-Assisted
	Methods},
  year = {2009},
  __markedentry = {[suxing:3]},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@ARTICLE{Leroy1996,
  author = {Leroy, Xavier},
  title = {The linuxthreads library},
  journal = {Now a part of the glibc GNU C library},
  year = {1996},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@ARTICLE{Lammel2008,
  author = {L{\"a}mmel, Ralf},
  title = {Google’s MapReduce programming model—Revisited},
  journal = {Science of computer programming},
  year = {2008},
  volume = {70},
  pages = {1--30},
  number = {1},
  __markedentry = {[suxing:4]},
  owner = {suxing},
  publisher = {Elsevier},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Marlow2004,
  author = {Marlow, Simon and Jones, Simon Peyton and Thaller, Wolfgang},
  title = {Extending the Haskell foreign function interface with concurrency},
  booktitle = {Proceedings of the 2004 ACM SIGPLAN workshop on Haskell},
  year = {2004},
  pages = {22--32},
  organization = {ACM},
  __markedentry = {[suxing:2]},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Marlow2010,
  author = {Marlow, Simon and Maier, Patrick and Loidl, Hans-Wolfgang and Aswad,
	Mustafa K and Trinder, Phil},
  title = {Seq no more: better strategies for parallel Haskell},
  booktitle = {ACM Sigplan Notices},
  year = {2010},
  volume = {45},
  number = {11},
  pages = {91--102},
  organization = {ACM},
  __markedentry = {[suxing:2]},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Marlow2011,
  author = {Marlow, Simon and Newton, Ryan and Peyton Jones, Simon},
  title = {A monad for deterministic parallelism},
  booktitle = {Proceedings of the 4th ACM symposium on Haskell},
  year = {2011},
  series = {Haskell '11},
  pages = {71--82},
  address = {New York, NY, USA},
  publisher = {ACM},
  __markedentry = {[suxing:2]},
  acmid = {2034685},
  isbn = {978-1-4503-0860-1},
  keywords = {haskell, parallel},
  location = {Tokyo, Japan},
  numpages = {12},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@MISC{moore1965,
  author = {Moore, Gordon E and others},
  title = {Cramming more components onto integrated circuits},
  year = {1965},
  publisher = {McGraw-Hill}
}

@MISC{Nvidia2008,
  author = {Nvidia, CUDA},
  title = {CUDA C Programming guide},
  year = {2008},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Ranger2007,
  author = {Ranger, Colby and Raghuraman, Ramanan and Penmetsa, Arun and Bradski,
	Gary and Kozyrakis, Christos},
  title = {Evaluating mapreduce for multi-core and multiprocessor systems},
  booktitle = {High Performance Computer Architecture, 2007. HPCA 2007. IEEE 13th
	International Symposium on},
  year = {2007},
  pages = {13--24},
  organization = {IEEE},
  __markedentry = {[suxing:4]},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@INPROCEEDINGS{Stuart2011,
  author = {Stuart, J.A. and Owens, J.D.},
  title = {Multi-GPU MapReduce on GPU Clusters},
  booktitle = {Parallel Distributed Processing Symposium (IPDPS), 2011 IEEE International},
  year = {2011},
  pages = {1068-1079},
  __markedentry = {[suxing:4]},
  abstract = {We present GPMR, our stand-alone MapReduce library that leverages
	the power of GPU clusters for large-scale computing. To better utilize
	the GPU, we modify MapReduce by combining large amounts of map and
	reduce items into chunks and using partial reductions and accumulation.
	We use persistent map and reduce tasks and stress aspects of GPMR
	with a set of standard MapReduce benchmarks. We run these benchmarks
	on a GPU cluster and achieve desirable speedup and efficiency for
	all benchmarks. We compare our implementation to the current-best
	GPU-MapReduce library (runs only on a solo GPU) and a highly-optimized
	multi-core MapReduce to show the power of GPMR. We demonstrate how
	typical MapReduce tasks are easily modified to fit into GPMR and
	leverage a GPU cluster. We highlight how total and relative amounts
	of communication affect GPMR. We conclude with an exposition on the
	types of MapReduce tasks well-suited to GPMR, and why some tasks
	need more modifications than others to work well with GPMR.},
  issn = {1530-2075},
  keywords = {computer graphic equipment;coprocessors;parallel processing;GPMR;GPU
	cluster;large-scale computing;multiGPU MapReduce;persistent map;stress
	aspect;Google;Graphics processing unit;Instruction sets;Libraries;Optimization;Pipelines;Programming},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@ARTICLE{Sussman1985,
  author = {Sussman, Gerry and Abelson, Hal and Sussman, Julie},
  title = {Structure and interpretation of computer programs},
  journal = {The Massachusetts Institute of Technology},
  year = {1985},
  volume = {10},
  __markedentry = {[suxing:]},
  owner = {suxing},
  timestamp = {2013.11.10}
}

@ARTICLE{TRINDER1998,
  author = {TRINDER,P. W. and HAMMOND,K. and LOIDL,H.-W. and PEYTON JONES,S.
	L.},
  title = {Algorithm + strategy = parallelism},
  journal = {Journal of Functional Programming},
  year = {1998},
  volume = {8},
  pages = {23--60},
  month = {0},
  __markedentry = {[suxing:2]},
  abstract = { ABSTRACT The process of writing large parallel programs is complicated
	by the need to specify both the parallel behaviour of the program
	and the algorithm that is to be used to compute its result. This
	paper introduces evaluation strategies: lazy higher-order functions
	that control the parallel evaluation of non-strict functional languages.
	Using evaluation strategies, it is possible to achieve a clean separation
	between algorithmic and behavioural code. The result is enhanced
	clarity and shorter parallel programs. Evaluation strategies are
	a very general concept: this paper shows how they can be used to
	model a wide range of commonly used programming paradigms, including
	divide-and-conquer parallelism, pipeline parallelism, producer&sol;consumer
	parallelism, and data-oriented parallelism. Because they are based
	on unrestricted higher-order functions, they can also capture irregular
	parallel structures. Evaluation strategies are not just of theoretical
	interest: they have evolved out of our experience in parallelising
	several large-scale parallel applications, where they have proved
	invaluable in helping to manage the complexities of parallel behaviour.
	Some of these applications are described in detail here. The largest
	application we have studied to date, Lolita, is a 40,000 line natural
	language engineering system. Initial results show that for these
	programs we can achieve acceptable parallel performance, for relatively
	little programming effort. },
  issn = {1469-7653},
  issue = {01},
  numpages = {38},
  owner = {suxing},
  timestamp = {2013.11.08}
}

@ARTICLE{Turing1937,
  author = {Turing, Alan M},
  title = {Computability and $\lambda$-definability},
  journal = {The Journal of Symbolic Logic},
  year = {1937},
  volume = {2},
  pages = {153--163},
  number = {4},
  owner = {suxing},
  publisher = {JSTOR},
  timestamp = {2013.11.10}
}

@ARTICLE{Wadler1997,
  author = {Wadler, Philip},
  title = {How to declare an imperative},
  journal = {ACM Computing Surveys (CSUR)},
  year = {1997},
  volume = {29},
  pages = {240--263},
  number = {3},
  __markedentry = {[suxing:6]},
  owner = {suxing},
  publisher = {ACM},
  timestamp = {2013.11.10}
}

@INPROCEEDINGS{Yoo2009,
  author = {Yoo, Richard M. and Romano, Anthony and Kozyrakis, Christos},
  title = {Phoenix rebirth: Scalable MapReduce on a large-scale shared-memory
	system},
  booktitle = {Proceedings of the 2009 IEEE International Symposium on Workload
	Characterization (IISWC)},
  year = {2009},
  series = {IISWC '09},
  pages = {198--207},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  __markedentry = {[suxing:4]},
  acmid = {1680796},
  isbn = {978-1-4244-5156-2},
  numpages = {10},
  owner = {suxing},
  timestamp = {2013.11.08}
}

